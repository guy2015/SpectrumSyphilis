// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// IntegrePol2CPos
double IntegrePol2CPos(const double& x, const double& a0, const double& b0, const double& c0);
RcppExport SEXP _SpectrumSyphilis_IntegrePol2CPos(SEXP xSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP c0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    rcpp_result_gen = Rcpp::wrap(IntegrePol2CPos(x, a0, b0, c0));
    return rcpp_result_gen;
END_RCPP
}
// VectIntegreSegPol2
NumericVector VectIntegreSegPol2(const NumericVector& xpars, const NumericVector& vectx, const double& frestrknots);
RcppExport SEXP _SpectrumSyphilis_VectIntegreSegPol2(SEXP xparsSEXP, SEXP vectxSEXP, SEXP frestrknotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type xpars(xparsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type vectx(vectxSEXP);
    Rcpp::traits::input_parameter< const double& >::type frestrknots(frestrknotsSEXP);
    rcpp_result_gen = Rcpp::wrap(VectIntegreSegPol2(xpars, vectx, frestrknots));
    return rcpp_result_gen;
END_RCPP
}
// VectIntegrePol2CPos
NumericVector VectIntegrePol2CPos(const NumericVector& xpars, const NumericVector& vectx, const double& frestrknots);
RcppExport SEXP _SpectrumSyphilis_VectIntegrePol2CPos(SEXP xparsSEXP, SEXP vectxSEXP, SEXP frestrknotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type xpars(xparsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type vectx(vectxSEXP);
    Rcpp::traits::input_parameter< const double& >::type frestrknots(frestrknotsSEXP);
    rcpp_result_gen = Rcpp::wrap(VectIntegrePol2CPos(xpars, vectx, frestrknots));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP InciSegPol2PID_Rv(SEXP, SEXP, SEXP);
RcppExport SEXP LBCheckCalc(SEXP, SEXP);
RcppExport SEXP logit(SEXP);
RcppExport SEXP PrevRandEff(SEXP, SEXP);
RcppExport SEXP ProjSegPol2PID(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP UBCheckCalc(SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_SpectrumSyphilis_IntegrePol2CPos", (DL_FUNC) &_SpectrumSyphilis_IntegrePol2CPos, 4},
    {"_SpectrumSyphilis_VectIntegreSegPol2", (DL_FUNC) &_SpectrumSyphilis_VectIntegreSegPol2, 3},
    {"_SpectrumSyphilis_VectIntegrePol2CPos", (DL_FUNC) &_SpectrumSyphilis_VectIntegrePol2CPos, 3},
    {"InciSegPol2PID_Rv", (DL_FUNC) &InciSegPol2PID_Rv, 3},
    {"LBCheckCalc",       (DL_FUNC) &LBCheckCalc,       2},
    {"logit",             (DL_FUNC) &logit,             1},
    {"PrevRandEff",       (DL_FUNC) &PrevRandEff,       2},
    {"ProjSegPol2PID",    (DL_FUNC) &ProjSegPol2PID,    6},
    {"UBCheckCalc",       (DL_FUNC) &UBCheckCalc,       3},
    {NULL, NULL, 0}
};

RcppExport void R_init_SpectrumSyphilis(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
